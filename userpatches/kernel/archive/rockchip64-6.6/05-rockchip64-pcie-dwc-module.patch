From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: John Doe <john.doe@somewhere.on.planet>
Date: Tue, 12 Nov 2024 16:24:05 +0000
Subject: Patching kernel rockchip64 files
 drivers/pci/controller/dwc/pcie-dw-rockchip.c

Signed-off-by: John Doe <john.doe@somewhere.on.planet>
---
 drivers/pci/controller/dwc/pcie-dw-rockchip.c | 34 +++++++---
 1 file changed, 26 insertions(+), 8 deletions(-)

diff --git a/drivers/pci/controller/dwc/pcie-dw-rockchip.c b/drivers/pci/controller/dwc/pcie-dw-rockchip.c
index d7aa6dff42c1..e6a600d7187f 100644
--- a/drivers/pci/controller/dwc/pcie-dw-rockchip.c
+++ b/drivers/pci/controller/dwc/pcie-dw-rockchip.c
@@ -56,12 +56,13 @@ struct rockchip_pcie {
 	struct phy			*phy;
 	struct clk_bulk_data		*clks;
 	unsigned int			clk_cnt;
 	struct reset_control		*rst;
 	struct gpio_desc		*rst_gpio;
-	struct regulator                *vpcie3v3;
+	struct regulator		*vpcie3v3;
 	struct irq_domain		*irq_domain;
+	unsigned int			irq;
 };
 
 static int rockchip_pcie_readl_apb(struct rockchip_pcie *rockchip,
 					     u32 reg)
 {
@@ -197,16 +198,17 @@ static int rockchip_pcie_host_init(struct dw_pcie_rp *pp)
 	int irq, ret;
 
 	irq = of_irq_get_byname(dev->of_node, "legacy");
 	if (irq < 0)
 		return irq;
+	rockchip->irq = irq;
 
 	ret = rockchip_pcie_init_irq_domain(rockchip);
 	if (ret < 0)
 		dev_err(dev, "failed to init irq domain\n");
 
-	irq_set_chained_handler_and_data(irq, rockchip_pcie_legacy_int_handler,
+	irq_set_chained_handler_and_data(rockchip->irq, rockchip_pcie_legacy_int_handler,
 					 rockchip);
 
 	/* LTSSM enable control mode */
 	rockchip_pcie_writel_apb(rockchip, val, PCIE_CLIENT_HOT_RESET_CTRL);
 
@@ -214,12 +216,26 @@ static int rockchip_pcie_host_init(struct dw_pcie_rp *pp)
 				 PCIE_CLIENT_GENERAL_CONTROL);
 
 	return 0;
 }
 
+static void rockchip_pcie_host_deinit(struct dw_pcie_rp *pp)
+{
+	struct dw_pcie *pci = to_dw_pcie_from_pp(pp);
+	struct rockchip_pcie *rockchip = to_rockchip_pcie(pci);
+
+	if (rockchip->irq > 0) {
+		printk("%s REMOVE IRQ HANDLE %d", __FUNCTION__, rockchip->irq);
+		irq_set_chained_handler_and_data(rockchip->irq, NULL, NULL);
+	}
+	printk("%s REMOVE IRQ DOMAIN %s", __FUNCTION__, rockchip->irq_domain->name);
+	irq_domain_remove(rockchip->irq_domain);
+}
+
 static const struct dw_pcie_host_ops rockchip_pcie_host_ops = {
 	.host_init = rockchip_pcie_host_init,
+	.host_deinit = rockchip_pcie_host_deinit,
 };
 
 static int rockchip_pcie_clk_init(struct rockchip_pcie *rockchip)
 {
 	struct device *dev = rockchip->pci.dev;
@@ -354,17 +370,19 @@ static int rockchip_pcie_probe(struct platform_device *pdev)
 	return ret;
 }
 
 static void rockchip_pcie_remove(struct platform_device *pdev)
 {
-  struct rockchip_pcie *rockchip = platform_get_drvdata(pdev);
+	struct rockchip_pcie *rockchip = platform_get_drvdata(pdev);
 
-  dw_pcie_host_deinit(&rockchip->pci.pp);
-  clk_bulk_disable_unprepare(rockchip->clk_cnt, rockchip->clks);
-  rockchip_pcie_phy_deinit(rockchip);
-  if (rockchip->vpcie3v3)
-    regulator_disable(rockchip->vpcie3v3);
+	printk(__FUNCTION__);
+	dw_pcie_host_deinit(&rockchip->pci.pp);
+	// put the following into the to-be-written deinit function:
+	clk_bulk_disable_unprepare(rockchip->clk_cnt, rockchip->clks);
+	rockchip_pcie_phy_deinit(rockchip);
+	if (rockchip->vpcie3v3)
+		regulator_disable(rockchip->vpcie3v3);
 }
 
 static const struct of_device_id rockchip_pcie_of_match[] = {
 	{ .compatible = "rockchip,rk3568-pcie", },
 	{},
-- 
Created with Armbian build tools https://github.com/armbian/build

